# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret="W_4bOiT4Z/nmYjqraD5dDuQwY@s422Wxk;>cBheP5:A00nExHOG1SKsQ[;^X13>5"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2552
    }
  }
  cluster {
    seed-nodes = ["akka.tcp://application@127.0.0.1:2552"
                  #Add more cluster nodes here
                  ]

    auto-down-unreachable-after = 10s
  }
  extensions = ["akka.contrib.pattern.DistributedPubSubExtension"]
  contrib.cluster.pub-sub {
    # Actor name of the mediator actor, /user/distributedPubSubMediator
    name = distributedPubSubMediator

    # Start the mediator on members tagged with this role.
    # All members are used if undefined or empty.
    role = ""

    # The routing logic to use for 'Send'
    # Possible values: random, round-robin, broadcast
    routing-logic = random

    # How often the DistributedPubSubMediator should send out gossip information
    gossip-interval = 1s

    # Removed entries are pruned after this duration
    removed-time-to-live = 120s

    # Maximum number of elements to transfer in one message when synchronizing the registries.
    # Next chunk will be transferred in next round of gossip.
    max-delta-elements = 3000
  }
}
